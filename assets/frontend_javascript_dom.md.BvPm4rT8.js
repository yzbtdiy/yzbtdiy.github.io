import{_ as a,c as e,o as l,a5 as t}from"./chunks/framework.ByOCcFwP.js";const g=JSON.parse('{"title":"javascript DOM","description":"","frontmatter":{"title":"javascript DOM","date":"2020-01-03T09:47:18.000Z","categories":"javascript","tags":["dom"]},"headers":[],"relativePath":"frontend/javascript/dom.md","filePath":"frontend/javascript/dom.md"}'),i={name:"frontend/javascript/dom.md"},o=t(`<h2 id="dom-简介" tabindex="-1">DOM 简介 <a class="header-anchor" href="#dom-简介" aria-label="Permalink to &quot;DOM 简介&quot;">​</a></h2><ul><li>DOM 是 <strong>Document Object Model</strong> 的缩写，译为 <strong>文档对象模型</strong></li><li>DOM 是针对 XML 但经过扩展用于 HTML 的 <strong>应用程序编程接口</strong>（ API，Application Programming Interface）</li><li>DOM 不只是针对 javascript 的，很多其它语言也实现了 DOM</li><li>DOM 规范解释了文档的结构并提供了对其进行操作的对象</li><li>DOM 提供了使程序和脚本有能力去动态访问和更新文档内容、结构及样式的方法和接口</li><li>window 是 <strong>浏览器窗口对象</strong>，document 是 window 下的一个属性，代表整个 DOM 对象模型</li><li>DOM 把整个页面映射为一个 <strong>多层节点结构</strong>，称为 <strong>DOM 树</strong> HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据 <ul><li>以 html 为根节点，各种标签形成分支节点组成倒立的树状结构，称为 DOM 树</li><li>通过 DOM 提供的方法去获取或操做的节点称为 DOM 对象</li></ul></li><li>DOM 节点： <ul><li>元素节点 标签</li><li>属性节点 标签属性</li><li>对象节点 文本内容</li><li>注释节点 注释说明</li></ul></li></ul><h2 id="dom-级别" tabindex="-1">DOM 级别 <a class="header-anchor" href="#dom-级别" aria-label="Permalink to &quot;DOM 级别&quot;">​</a></h2><h3 id="dom0-不存在的" tabindex="-1">DOM0 不存在的 <a class="header-anchor" href="#dom0-不存在的" aria-label="Permalink to &quot;DOM0 不存在的&quot;">​</a></h3><ul><li>在阅读 DOM 标准的时候，可能会遇到 DOM0 级（DOM Level 0）</li><li>DOM0 级标准并不存在，所谓 DOM0 级是 Internet Explorer 4.0 和 Netscape Navigator 4.0 最初支持的 <strong>DHTML</strong>（Dynamic HTML），只是 DOM 历史坐标中的一个参照点</li></ul><h3 id="dom1-最初的标准" tabindex="-1">DOM1 最初的标准 <a class="header-anchor" href="#dom1-最初的标准" aria-label="Permalink to &quot;DOM1 最初的标准&quot;">​</a></h3><ul><li>DOM1 级（ DOM Level 1）于 1998 年 10 月成为 <strong>W3C</strong>（World Wide Web Consortium，万维网联盟）的 <strong>推荐标准</strong></li><li>DOM1 级由 <strong>DOM Core</strong>（DOM 核心）和 <strong>DOM HTML</strong> 两个模块组成</li><li><strong>DOM Core</strong> 规定的是如何映射基于 XML 的文档结构，以便简化对文档任意部分的访问和操作</li><li><strong>DOM HTML</strong> 模块在 <strong>DOM Core</strong> 的基础上加以扩展，添加了针对 HTML 的对象和方法</li><li>DOM1 级的目标主要是 <strong>映射文档的结构</strong></li></ul><h3 id="dom2-新模块-新类型-新接口" tabindex="-1">DOM2 新模块，新类型，新接口 <a class="header-anchor" href="#dom2-新模块-新类型-新接口" aria-label="Permalink to &quot;DOM2 新模块，新类型，新接口&quot;">​</a></h3><ul><li><strong>DOM Views</strong>（DOM 视图）：定义了跟踪不同文档视图的接口（如应用 CSS 之前和之后的文档）</li><li><strong>DOM Events</strong>（DOM 事件）：定义了事件和事件处理的接口</li><li><strong>DOM Style</strong>（DOM 样式）：定义了基于 CSS 为元素应用样式的接口</li><li><strong>DOM Traversal and Range</strong>（DOM 遍历和范围）：定义了遍历和操作文档树的接口</li></ul><h3 id="dom3-dom-新增模块、核心扩展" tabindex="-1">DOM3 DOM 新增模块、核心扩展 <a class="header-anchor" href="#dom3-dom-新增模块、核心扩展" aria-label="Permalink to &quot;DOM3 DOM 新增模块、核心扩展&quot;">​</a></h3><ul><li>引入了以统一方式加载和保存文档的方法，<strong>DOM Load and Save</strong>（DOM 加载和保存）模块</li><li>新增了验证文档的方法，<strong>DOM Validation</strong>（DOM 验证）模块</li><li>DOM 核心扩展，开始支持 XML 1.0 规范，涉及 XML Infoset、XPath 和 XML Base</li></ul><h2 id="其他-dom-标准" tabindex="-1">其他 DOM 标准 <a class="header-anchor" href="#其他-dom-标准" aria-label="Permalink to &quot;其他 DOM 标准&quot;">​</a></h2><p>除了 DOM 核心和 DOM HTML 接口之外，其他几种语言还发布了 <strong>只针对自己</strong> 的 DOM 标准，以下是其他 W3C 推荐的标准：</p><ul><li>SVG（ Scalable Vector Graphic，可伸缩矢量图） 1.0</li><li>MathML（ Mathematical Markup Language，数学标记语言） 1.0</li><li>SMIL（ Synchronized Multimedia Integration Language，同步多媒体集成语言）</li><li>XUL（ XML User Interface Language， XML 用户界面语言，Mozilla 开发）</li></ul><h2 id="获取-dom-对象" tabindex="-1">获取 DOM 对象 <a class="header-anchor" href="#获取-dom-对象" aria-label="Permalink to &quot;获取 DOM 对象&quot;">​</a></h2><h3 id="window-onload" tabindex="-1">window.onload <a class="header-anchor" href="#window-onload" aria-label="Permalink to &quot;window.onload&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>window.onload</code> 是等待页面加载完成事件</li><li>通常 js 代码写在 <code>window.onload</code> 函数中，页面加载完成后才会执行该函数中的代码</li></ul><h3 id="document-getelementbyid" tabindex="-1">document.getElementById() <a class="header-anchor" href="#document-getelementbyid" aria-label="Permalink to &quot;document.getElementById()&quot;">​</a></h3><ul><li>参数为 id 名</li><li>通过 id 获取单个元素封装为 DOM 对象并返回</li></ul><h3 id="document-getelementsbytagname" tabindex="-1">document.getElementsByTagName() <a class="header-anchor" href="#document-getelementsbytagname" aria-label="Permalink to &quot;document.getElementsByTagName()&quot;">​</a></h3><ul><li>参数为标签名</li><li>通过标签获取元素封装为 DOM 对象，返回一个伪数组</li></ul><h3 id="document-getelementsbyclassname" tabindex="-1">document.getElementsByClassName() <a class="header-anchor" href="#document-getelementsbyclassname" aria-label="Permalink to &quot;document.getElementsByClassName()&quot;">​</a></h3><ul><li>参数为类名</li><li>通过类名获取元素封装为 DOM 对象，返回一个伪数组</li></ul><h3 id="queryselector" tabindex="-1">querySelector() <a class="header-anchor" href="#queryselector" aria-label="Permalink to &quot;querySelector()&quot;">​</a></h3><ul><li>通过选择器获取单个元素封装为 DOM 对象并返回</li></ul><h3 id="queryselectorall" tabindex="-1">querySelectorAll() <a class="header-anchor" href="#queryselectorall" aria-label="Permalink to &quot;querySelectorAll()&quot;">​</a></h3><ul><li>通过选择器获取多个元素封装为 DOM 对象，返回一个伪数组</li></ul>`,28),n=[o];function r(s,d,h,c,u,M){return l(),e("div",null,n)}const D=a(i,[["render",r]]);export{g as __pageData,D as default};
