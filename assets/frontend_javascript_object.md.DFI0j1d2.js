import{_ as i,c as a,o as s,a5 as e}from"./chunks/framework.ByOCcFwP.js";const u=JSON.parse('{"title":"javascript 对象","description":"","frontmatter":{"title":"javascript 对象","date":"2019-12-27T09:33:50.000Z","categories":"javascript","tags":["object"]},"headers":[],"relativePath":"frontend/javascript/object.md","filePath":"frontend/javascript/object.md"}'),l={name:"frontend/javascript/object.md"},t=e(`<h2 id="对象定义" tabindex="-1">对象定义 <a class="header-anchor" href="#对象定义" aria-label="Permalink to &quot;对象定义&quot;">​</a></h2><p>在 javascript 中，对象是一系列无序键值对的集合，javascript 中对象的概念类似于 python 中的字典</p><h2 id="对象的创建" tabindex="-1">对象的创建 <a class="header-anchor" href="#对象的创建" aria-label="Permalink to &quot;对象的创建&quot;">​</a></h2><h3 id="字面量定义" tabindex="-1">字面量定义 <a class="header-anchor" href="#字面量定义" aria-label="Permalink to &quot;字面量定义&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	key1: values1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	key2: values2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="构造函数定义" tabindex="-1">构造函数定义 <a class="header-anchor" href="#构造函数定义" aria-label="Permalink to &quot;构造函数定义&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	key1: values1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	key2: values2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="工厂-函数-模式定义" tabindex="-1">工厂（函数）模式定义 <a class="header-anchor" href="#工厂-函数-模式定义" aria-label="Permalink to &quot;工厂（函数）模式定义&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="对象属性" tabindex="-1">对象属性 <a class="header-anchor" href="#对象属性" aria-label="Permalink to &quot;对象属性&quot;">​</a></h2><p>ECMAScript 中有两种属性：数据属性和访问器属性</p><h3 id="数据属性" tabindex="-1">数据属性 <a class="header-anchor" href="#数据属性" aria-label="Permalink to &quot;数据属性&quot;">​</a></h3><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。</p><h4 id="configurable" tabindex="-1"><code>[[Configurable]]:</code> <a class="header-anchor" href="#configurable" aria-label="Permalink to &quot;\`[[Configurable]]:\`&quot;">​</a></h4><ul><li>能否通过 delete 删除属性从而重新定义属性</li><li>能否修改属性的特性或能否把属性修改为访问器属性</li><li>直接在对象上定义的属性的 <code>[[Configurable]]:</code> 值默认为 true</li></ul><h4 id="enumerable" tabindex="-1"><code>[[Enumerable]]:</code> <a class="header-anchor" href="#enumerable" aria-label="Permalink to &quot;\`[[Enumerable]]:\`&quot;">​</a></h4><ul><li>能否通过 for-in 循环返回属性</li><li>直接在对象上定义的属性的 <code>[[Enumerable]]:</code> 值默认为 true</li></ul><h4 id="writable" tabindex="-1"><code>[[Writable]]:</code> <a class="header-anchor" href="#writable" aria-label="Permalink to &quot;\`[[Writable]]:\`&quot;">​</a></h4><ul><li>能够修改属性的值</li><li>直接在对象上定义的属性的 <code>[[Writable]]:</code> 值默认为 true</li></ul><h4 id="value" tabindex="-1"><code>[[Value]]:</code> <a class="header-anchor" href="#value" aria-label="Permalink to &quot;\`[[Value]]:\`&quot;">​</a></h4><ul><li>包含这个属性的数据值</li><li>读取和写入属性值均为操作 <code>[[Value]]:</code> 的值，默认值为 undefined</li></ul><h3 id="访问器属性" tabindex="-1">访问器属性 <a class="header-anchor" href="#访问器属性" aria-label="Permalink to &quot;访问器属性&quot;">​</a></h3><ul><li>访问器属性不能直接定义，必须使用 <code>Object.defineProperty()</code> 来定义</li></ul><h4 id="configurable-1" tabindex="-1"><code>[[Configurable]]:</code> <a class="header-anchor" href="#configurable-1" aria-label="Permalink to &quot;\`[[Configurable]]:\`&quot;">​</a></h4><ul><li>能否通过 delete 删除属性从而重新定义属性</li><li>能否修改属性的特性，或者能否把属性修改为数据属性</li><li>直接在对象上定义的属性 <code>[[Configurable]]:</code> 值默认为 true</li></ul><h4 id="enumerable-1" tabindex="-1"><code>[[Enumerable]]:</code> <a class="header-anchor" href="#enumerable-1" aria-label="Permalink to &quot;\`[[Enumerable]]:\`&quot;">​</a></h4><ul><li>能否通过 for-in 循环返回属性</li><li>直接在对象上定义的属性 <code>[[Enumerable]]:</code> 值默认为 true</li></ul><h4 id="get" tabindex="-1"><code>[[Get]]:</code> <a class="header-anchor" href="#get" aria-label="Permalink to &quot;\`[[Get]]:\`&quot;">​</a></h4><ul><li>读取属性时调用的函数，默认值为 undefined</li></ul><h4 id="set" tabindex="-1"><code>[[Set]]:</code> <a class="header-anchor" href="#set" aria-label="Permalink to &quot;\`[[Set]]:\`&quot;">​</a></h4><ul><li>写入属性时定义的函数，默认值为 undefined</li></ul><h2 id="对象操作" tabindex="-1">对象操作 <a class="header-anchor" href="#对象操作" aria-label="Permalink to &quot;对象操作&quot;">​</a></h2><h3 id="增和查" tabindex="-1">增和查 <a class="header-anchor" href="#增和查" aria-label="Permalink to &quot;增和查&quot;">​</a></h3><ul><li>通过 <code>对象.属性</code> 和 <code>对象[属性]</code> 都可以操作对象，有则改之，无则增加</li><li>特定条件下必须使用 <code>[]</code>： <ul><li>属性名不符合标识符规范</li><li>属性名是变量</li></ul></li></ul><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1.key;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1[key];</span></span></code></pre></div><ul><li>使用 <code>delete</code> 关键字删除对象中的键值对</li></ul><h3 id="遍历" tabindex="-1">遍历 <a class="header-anchor" href="#遍历" aria-label="Permalink to &quot;遍历&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, obj1[key])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>对象的遍历使用 <code>for ... in ...</code></li><li>数组和函数也可以作为对象使用，添加属性值</li><li>数组使用 <code>for ... in ...</code> 遍历会将索引作为属性，索引值作为属性值</li></ul><h2 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">gender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsCreater </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brendan Eich&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">58</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;male&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>javascript 使用构造函数（constructor）作为对象的模板，用来生成具有相同基本结构的对象</li><li>构造函数的函数名通常使用大驼峰方式命名，以便于区分</li><li>ES6 中引入 class</li><li>函数可以作为普通函数使用，也可以作为函数对象使用（构造函数属于函数对象）</li><li>作为普通函数使用： <ul><li>调用时不使用 new 关键字，函数内部 this 代表 window 对象</li><li>函数调用相当于在 window 对象中增加了一些属性和值</li><li>有 return 函数表达式返回对应的值，无 return 返回 undefined</li></ul></li><li>作为构造函数使用： <ul><li>务必使用 new 关键字，函数内部 this 代表实例化的对象</li><li>函数调用相当于在实例化后的对象内部添加了一些属性和值</li><li>无 return 或者 return 值为基本数据类型，函数表达式返回值为示例化后的对象</li><li>return 值为对象数据类型，函数表达式返回值为 return 对象的数据</li></ul></li></ul><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><ul><li>this 本质是一个变量，它指向函数的执行者： <ul><li>在函数中 this 指向 window 对象（浏览器窗口对象）</li><li>在方法中 this 指向方法的对象（方法是指对象内属性的属性值）</li><li>在事件处理（回调）函数中 this 指向发生事件的元素</li><li>在构造函数中 this 指向准备实例化的对象</li></ul></li></ul><h3 id="apply-call" tabindex="-1">apply &amp; call <a class="header-anchor" href="#apply-call" aria-label="Permalink to &quot;apply &amp; call&quot;">​</a></h3><ul><li><code>apply</code> 和 <code>call</code> 可以改变函数运行时的上下文（context），也就是改变函数内部 this 的指向</li><li><code>apply</code> 和 <code>call</code> 的第一个参数为 this 的新</li></ul><h2 id="原型对象和原型链" tabindex="-1">原型对象和原型链 <a class="header-anchor" href="#原型对象和原型链" aria-label="Permalink to &quot;原型对象和原型链&quot;">​</a></h2><ul><li>javascript 的继承是通过原型对象（prototype）实现的</li><li>原型对象的所有属性和方法，都能被实例对象共享，可以减少内存占用</li><li>原型对象分为显示原型对象和隐式原型对象 <ul><li>显示原型对象是函数对象下的 <code>prototype</code> 对象，通常用来操作原型对象</li><li>隐式原型对象是实例对象下的 <code>__proto__</code> 对象，通产用来查找原型对象</li><li><code>prototype</code> 和 <code>__proto__</code> 在内存中引用地址相同</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yzbtdiy/images@main/js/js-prototype.svg" alt=""></p>`,50),n=[t];function h(r,p,d,k,o,c){return s(),a("div",null,n)}const g=i(l,[["render",h]]);export{u as __pageData,g as default};
