import{_ as a,c as s,o as i,a5 as e}from"./chunks/framework.ByOCcFwP.js";const b=JSON.parse('{"title":"javascript 变量和数据类型","description":"","frontmatter":{"title":"javascript 变量和数据类型","date":"2019-12-17T19:48:02.000Z","categories":"javascript","tags":["variables","data type"]},"headers":[],"relativePath":"frontend/javascript/variables-and-data-types.md","filePath":"frontend/javascript/variables-and-data-types.md"}'),n={name:"frontend/javascript/variables-and-data-types.md"},l=e(`<h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h3><p>ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据，每个变量仅仅是一个用于保存值的占位符而已。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//先定义后赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义同时初始化变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//不使用 var 关键字</span></span></code></pre></div><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><h3 id="标识符规范" tabindex="-1">标识符规范 <a class="header-anchor" href="#标识符规范" aria-label="Permalink to &quot;标识符规范&quot;">​</a></h3><ul><li>只能由字母，数字，下划线和 $ 组成</li><li>不能以数字开头</li><li>不能与关键字和保留字同名</li></ul><h3 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>break do instanceof typeof</span></span>
<span class="line"><span>case else new var</span></span>
<span class="line"><span>catch finally return void</span></span>
<span class="line"><span>continue for switch while</span></span>
<span class="line"><span>debugger* function this with</span></span>
<span class="line"><span>default if throw</span></span>
<span class="line"><span>delete in try</span></span></code></pre></div><h3 id="保留字" tabindex="-1">保留字 <a class="header-anchor" href="#保留字" aria-label="Permalink to &quot;保留字&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>abstract enum int short</span></span>
<span class="line"><span>boolean export interface static</span></span>
<span class="line"><span>byte extends long super</span></span>
<span class="line"><span>char final native synchronized</span></span>
<span class="line"><span>class float package throws</span></span>
<span class="line"><span>const goto private transient</span></span>
<span class="line"><span>debugger implements protected volatile</span></span>
<span class="line"><span>double import public</span></span></code></pre></div><h3 id="命名方法" tabindex="-1">命名方法 <a class="header-anchor" href="#命名方法" aria-label="Permalink to &quot;命名方法&quot;">​</a></h3><ul><li>大驼峰 每个单词首字母都大写（VariableName）</li><li>小驼峰 第一个单词首字母小写，之后每个单词首字母大写（variableName）</li><li>下划线 单词字母均采用小写，单词之间用下划线隔开（variable_name）</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><ul><li>number 数字：整数，小数，科学计数法，二进制（0b），八进制（0o），十六进制（0x）</li><li>string 字符串：使用单引号或双引号包裹内容，空字符串和空白字符串比较特殊，引用嵌需要单引号和双引号交替使用</li><li>boolean 布尔值：true 或 false</li><li>undefined 变量未赋值：undefined</li><li>null 一般对对象进行初始化使用或者删除对象时使用</li></ul><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><ul><li>object 对象：大多数类型值都是 object 类型的实例</li><li>array 数组：单个数组可以同时保存多种数据类型，数组大小可以动态调整</li><li>function 函数：函数使用声明语法进行定义</li></ul><h2 id="数据类型判断" tabindex="-1">数据类型判断 <a class="header-anchor" href="#数据类型判断" aria-label="Permalink to &quot;数据类型判断&quot;">​</a></h2><ul><li><code>typeof</code> 用来判断值得数据类型，返回值为数据类型名的字符串</li><li><code>typeof 10</code> 返回 &quot;number&quot;</li><li><code>typeof &quot;some message&quot;</code> 返回 &quot;stringr&quot;</li><li><code>typeof true</code> 返回 &quot;boolean&quot;</li><li><code>typeof 未赋值变量</code> 返回 &quot;undefined&quot;</li><li><code>typeof null</code> 返回 &quot;oboject&quot;（特殊）</li></ul>`,20),t=[l];function p(o,r,h,d,c,u){return i(),s("div",null,t)}const g=a(n,[["render",p]]);export{b as __pageData,g as default};
