import{_ as s,c as i,o as a,a5 as l}from"./chunks/framework.ByOCcFwP.js";const g=JSON.parse('{"title":"css 布局模型","description":"","frontmatter":{"title":"css 布局模型","date":"2019-12-08T14:47:44.000Z","categories":"css","tags":["flow","float","layer","position","flex"]},"headers":[],"relativePath":"frontend/css/layout-model.md","filePath":"frontend/css/layout-model.md"}'),e={name:"frontend/css/layout-model.md"},n=l(`<h2 id="布局模型" tabindex="-1">布局模型 <a class="header-anchor" href="#布局模型" aria-label="Permalink to &quot;布局模型&quot;">​</a></h2><p>css 包含 3 种基本的布局模型，分别是：Flow、Layer 和 Float</p><p>在网页中，元素有三种布局模型：</p><ul><li>流动模型（Flow）</li><li>浮动模型 (Float)</li><li>层模型（Layer）</li></ul><h2 id="流动模型-flow" tabindex="-1">流动模型-flow <a class="header-anchor" href="#流动模型-flow" aria-label="Permalink to &quot;流动模型-flow&quot;">​</a></h2><ul><li>流动布局，又称为标准流或文档流，是网页默认的布局模式</li><li>块元素独占一行垂直分布，内联元素从左至右水平分布</li><li>块元素可以设置宽和高，内联元素设置宽高无效</li></ul><h2 id="浮动模型-float" tabindex="-1">浮动模型-float <a class="header-anchor" href="#浮动模型-float" aria-label="Permalink to &quot;浮动模型-float&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">float: left;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       right;</span></span></code></pre></div><ul><li>设置 <code>float</code> 属性后，元素会处于半脱离标准流的状态，当元素设置浮动后，不再具备之前的显示模式，也称为浮动流</li><li>浮动用来做网页的行向布局，实现块元素水平排列</li><li>不论是块元素还是内联元素，设置浮动后，均可以设置宽高</li><li>浮动最初的作用是实现文本环绕效果</li></ul><h2 id="层模型-layer" tabindex="-1">层模型-layer <a class="header-anchor" href="#层模型-layer" aria-label="Permalink to &quot;层模型-layer&quot;">​</a></h2><h3 id="相对定位" tabindex="-1">相对定位 <a class="header-anchor" href="#相对定位" aria-label="Permalink to &quot;相对定位&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">position: relative;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left: XXpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top: XXpx;</span></span></code></pre></div><ul><li>相对定位，也叫占位定位，设置偏移量后，参照自身在标准流中的位置进行移动</li><li>相对定位不影响其他的元素，但在标准流中的位置始终存在</li></ul><h3 id="绝对定位" tabindex="-1">绝对定位 <a class="header-anchor" href="#绝对定位" aria-label="Permalink to &quot;绝对定位&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">position: absolute;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left: XXpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top: XXpx;</span></span></code></pre></div><ul><li>绝对定位使元素处于完全脱离标准流的状态，设置宽高起作用</li><li>默认参考点 left，top 位于 body 左上，right，bottom 位于窗口第一屏右下</li><li>绝对定位的参考点会根据距离最近的设置定位的父辈元素确定</li></ul><h3 id="固定定位" tabindex="-1">固定定位 <a class="header-anchor" href="#固定定位" aria-label="Permalink to &quot;固定定位&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">position: fixed;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left: XXpx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top: XXpx;</span></span></code></pre></div><ul><li>固定定位将元素固定带到浏览器窗口的某个位置，固定定位的参考点永远是浏览器窗口</li></ul><h3 id="定位偏移量" tabindex="-1">定位偏移量 <a class="header-anchor" href="#定位偏移量" aria-label="Permalink to &quot;定位偏移量&quot;">​</a></h3><ul><li><code>left</code> 正值向右，负值向左</li><li><code>right</code> 正值向左，负值向右</li><li><code>top</code> 正值向下，负值向上</li><li><code>bottom</code> 正值向上，负值向下</li><li>水平或垂直两个值都存在时，<code>left</code> 和 <code>top</code> 优先</li></ul><h3 id="定位层级" tabindex="-1">定位层级 <a class="header-anchor" href="#定位层级" aria-label="Permalink to &quot;定位层级&quot;">​</a></h3><ul><li>设置定位的元素可以设置 <code>z-index</code> 层级属性</li><li>层级的值是一个整数，正值位于标准流之上，负值位于标准流之下，默认值为 0</li></ul><h3 id="定位元素居中" tabindex="-1">定位元素居中 <a class="header-anchor" href="#定位元素居中" aria-label="Permalink to &quot;定位元素居中&quot;">​</a></h3><ul><li>水平居中：<code>left: 50%; margin-left: 负自身宽度的一半</code></li><li>垂直居中：<code>top: 50%; margin-top: 负自身高度的一半</code></li></ul><h3 id="定位溢出隐藏" tabindex="-1">定位溢出隐藏 <a class="header-anchor" href="#定位溢出隐藏" aria-label="Permalink to &quot;定位溢出隐藏&quot;">​</a></h3><ul><li>绝对定位元素溢出参考点的父辈元素且父辈元素设置了 <code>overflow: hidden;</code> 后，溢出部分会被隐藏</li></ul><h2 id="flex-布局" tabindex="-1">flex 布局 <a class="header-anchor" href="#flex-布局" aria-label="Permalink to &quot;flex 布局&quot;">​</a></h2><ul><li>弹性布局又称 flex 布局，弹性盒子，伸缩盒子或伸缩布局</li><li>任何一个元素都可以为其子元素开启弹性空间，位于弹性空间的子元素又称为弹性项或弹性元素（flex item）</li><li>开启 flex 布局的元素称为 flex 容器（flex container） ，默认存在两根轴</li><li>主轴（main axis）：默认水平，从左至右排列，起始 main start，结束 main end</li><li>交叉轴（cross axis）：又称侧轴，默认垂直，从上至下排列，起始 cross start，结束cross end</li><li>弹性元素默认沿主轴排列，单个元素占据主轴空间称为 main size，占据交叉轴空间叫做 cross size</li><li><a href="https://flexboxfroggy.com/#zh-cn" target="_blank" rel="noreferrer">Flexbox Froggy</a> 在线练习flex布局(flex 青蛙练习)</li></ul><p><strong>容器属性</strong></p><h3 id="flex-flow" tabindex="-1">flex-flow <a class="header-anchor" href="#flex-flow" aria-label="Permalink to &quot;flex-flow&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: row nowrap;</span></span></code></pre></div><ul><li><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的复合属性</li></ul><h3 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-label="Permalink to &quot;flex-direction&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-direction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: row;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*水平左至右*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                row-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*水平右至左*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                column;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*垂直上至下*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                column-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*垂直下至上*/</span></span></code></pre></div><ul><li><code>flex-direction</code> 属性指定主轴方向，默认水平由左至右</li></ul><h3 id="flex-wrap" tabindex="-1">flex-wrap <a class="header-anchor" href="#flex-wrap" aria-label="Permalink to &quot;flex-wrap&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: nowrap;            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*不换行，进行压缩，默认*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           wrap;              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*换行，第一行在上方*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">           wrap-reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*换行，第一行在下方*/</span></span></code></pre></div><ul><li>弹性元素默认都排在一条轴线上，若轴线空间不够会进行压缩</li><li><code>flex-wrap</code> 属性可以设置当轴线不能容纳所有元素是否换行</li></ul><h3 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-label="Permalink to &quot;justify-content&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*左对齐，默认*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                 flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*右对齐*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 center;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*居中*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                 space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*两端对齐，两侧无间距*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">                 space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*两侧间距是元素间距的一半*/</span></span></code></pre></div><ul><li><code>justify-content</code> 指定了弹性元素在主轴的对齐方式</li></ul><h3 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stretch;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*默认，未设置高度占满整个容器*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">             flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴起点对齐*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">             flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴终点对齐*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             center;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴居中对齐*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             baseline;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*第一行文字基线对齐*/</span></span></code></pre></div><ul><li><code>align-items</code> 属性指定弹性元素在交叉轴上的对齐方式（单轴线）</li></ul><h3 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: stretch;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*默认，轴线占满交叉轴*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">               flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴起点对齐*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">               flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴终点对齐*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               center;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴居中对齐*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">               space-between</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*交叉轴两端对齐，轴线间隔平均分布*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">               space-around</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*轴线间距是边框到轴线间距的2倍*/</span></span></code></pre></div><ul><li><code>align-content</code> 属性指定多根轴线的对齐方式，只有一根轴线时无效</li></ul><p><strong>元素属性</strong></p><h3 id="flex" tabindex="-1">flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;flex&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>flex: 0 1 auto;</span></span>
<span class="line"><span>      auto;         /*相当于 1 1 auto*/</span></span>
<span class="line"><span>      none;         /*相当于 0 0 auto*/</span></span></code></pre></div><ul><li><code>flex</code>是 <code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code> 的复合属性</li></ul><h3 id="order" tabindex="-1">order <a class="header-anchor" href="#order" aria-label="Permalink to &quot;order&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">order: NUMBER;</span></span></code></pre></div><ul><li>元素默认 <code>order</code> 值为 0, 正负数字均可设置</li><li>设置 <code>order</code> 属性的元素从小到大排列</li></ul><h3 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-label="Permalink to &quot;flex-grow&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-grow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NUMBER;</span></span></code></pre></div><ul><li><code>flex-grow</code> 定义父元素的宽度大于子元素宽度之和时，剩余空间分配给子元素点的比率, 默认为 0，不会占用剩余空间，数值越大占用空间越大</li></ul><h3 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-shrink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: NUMBER;</span></span></code></pre></div><ul><li><code>flex-shrink</code> 用来定义父元素宽度小于所有子元素的宽度的和时子元素如何缩小宽度</li><li>默认值为 1, 所有元素相加之后计算比率来进行空间收缩</li><li>数值越大缩小越多, 设置为 0 不缩小</li></ul><h3 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">flex-basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            LENGTH;</span></span></code></pre></div><ul><li><code>flex-basis</code> 属性指定在分配多余空间之前，元素占据主轴的空间（main size）</li><li>默认值 <code>auto</code> 为元素自身大小，可以设置为固定宽度, 该属性优先级高于 <code>width</code></li></ul><h3 id="align-self" tabindex="-1">align-self <a class="header-anchor" href="#align-self" aria-label="Permalink to &quot;align-self&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: auto;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            flex-start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            flex-end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            center;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseline;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            stretch;</span></span></code></pre></div><ul><li>设置单个元素其他元素不同的对齐方式，可以覆盖 <code>align-items</code> 属性</li><li>默认值 <code>auto</code> 表示继承父元素属性，若没有父元素相当于 <code>stretch</code></li></ul><h2 id="grid-布局" tabindex="-1">grid 布局 <a class="header-anchor" href="#grid-布局" aria-label="Permalink to &quot;grid 布局&quot;">​</a></h2><ul><li>外层容器设置 <code>display: grid</code> 即可开启 grid 布局</li></ul><h3 id="grid-模板" tabindex="-1">grid 模板 <a class="header-anchor" href="#grid-模板" aria-label="Permalink to &quot;grid 模板&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                         repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto-fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, 100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 20%;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                         </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;header header heade&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                       &#39;aside main main&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                       &#39;aside main main&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                       &#39;. footer .&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>grid-template-columns</code> 对 grid 容器进行列拆分</li><li><code>grid-template-rows</code> 对 grid 容器进行行拆分 <ul><li>fr 为 grid 专用单位, 代表 grid 布局剩余空间的分配比率</li><li><code>repeat(次数, 重复值)</code> 可以减少编写重复相同长度的</li><li>容器大小不固定, 但单元格大小固定, 可以用 <code>auto-fill</code> , 每行尽可能多的分布</li></ul></li><li><code>grid-template-areas</code>根据设置好的行和列分配区域 <ul><li>上方生成了 4 行 3 列 的单元格</li><li>此时第 1 行 为 header 区域</li><li>第 2 和第 3 行的左侧 1/3 为 aside 区域, 右侧 2/3 为 main 区域</li><li>第 4 行中间 1/3 为 footer 区域, 两侧未分配</li></ul></li></ul><h3 id="grid-元素间距" tabindex="-1">grid 元素间距 <a class="header-anchor" href="#grid-元素间距" aria-label="Permalink to &quot;grid 元素间距&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gap: 8px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">column-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 10px;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">row-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 20px;</span></span></code></pre></div><ul><li><code>gap</code> 同时设置行间距和列间距</li><li><code>column-gap</code> 用于设置列间距</li><li><code>row-gap</code> 用于设置行间距</li></ul><h3 id="grid-区域分配" tabindex="-1">grid 区域分配 <a class="header-anchor" href="#grid-区域分配" aria-label="Permalink to &quot;grid 区域分配&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-areas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 等同于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //grid-areas: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //等同于</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //grid-row: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //grid-column: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    //等同于 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/ span </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>grid-areas</code> 根据 <code>grid-template</code> 相关属性生成的模板进行布局</li><li>可以用 area 名定义区域, 也可以用轴线定义, 轴线比行或列数字多 1</li><li>span 关键字表示当前轴线向后延伸</li></ul><h3 id="grid-对齐方式" tabindex="-1">grid 对齐方式 <a class="header-anchor" href="#grid-对齐方式" aria-label="Permalink to &quot;grid 对齐方式&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: center;    //start end </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: center;    //start end</span></span></code></pre></div><ul><li>grid 容器内部元素对齐方式, 类似 flex</li><li><code>justify-items</code> 为水平对齐方式</li><li><code>align-items</code> 为垂直对齐方式</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">justify-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: center;    //start end </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">space-between</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">align-content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: center;    //start end</span></span></code></pre></div><ul><li>行和列元素和小于 grid 容器时的对齐方式</li></ul>`,83),t=[n];function h(p,k,d,r,o,c){return a(),i("div",null,t)}const u=s(e,[["render",h]]);export{g as __pageData,u as default};
