import{_ as i,c as s,o as a,a5 as l}from"./chunks/framework.ByOCcFwP.js";const g=JSON.parse('{"title":"移动端屏幕适配","description":"","frontmatter":{"title":"移动端屏幕适配","date":"2020-05-13T20:24:29.000Z","categories":"html","tags":["mobile"]},"headers":[],"relativePath":"frontend/html/mobile-device-screen-adaptation.md","filePath":"frontend/html/mobile-device-screen-adaptation.md"}'),e={name:"frontend/html/mobile-device-screen-adaptation.md"},t=l(`<h2 id="视口" tabindex="-1">视口 <a class="header-anchor" href="#视口" aria-label="Permalink to &quot;视口&quot;">​</a></h2><ul><li><p>视觉视口 (visual viewport)</p><ul><li>视觉视口默认等于当前浏览器的窗口大小</li><li>通过 <code>window.innerWidth</code> 或者 <code>window.visualViewport.width</code> 获取大小</li></ul></li><li><p>布局视口 (layout viewport)</p><ul><li>布局视口是网页布局的基准， 大部分为移动设备布局视口默认值为 980px</li><li>布局视口通过 <code>document.documentElement.clientWidth</code> 获取大小</li></ul></li><li><p>理想视口 (ideal viewport)</p><ul><li>理想视口是页面在移动端展示的理想大小, 及布局视口和设备宽度一样</li><li>通过 <code>window.screen.width</code> 获取大小</li></ul></li></ul><h3 id="meta-viewport" tabindex="-1">meta viewport <a class="header-anchor" href="#meta-viewport" aria-label="Permalink to &quot;meta viewport&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><ul><li><code>width</code>：布局视口宽度, 可以设置为固定的值或者 <code>device-width</code>（设备宽度）</li><li><code>initial-scale</code>：页面的初始缩放系数 (缩放系数 = 理想视口宽度 / 视觉视口宽度)</li><li><code>minimum-scale</code>：最小的缩放系数</li><li><code>maximum-scale</code>：最大的缩放系数</li><li><code>user-scalable</code>：用户缩放, no 为禁用用户缩放</li><li><code>width</code> 和 <code>initial-scale</code> 都会初始化布局视口, 浏览器取较大值</li></ul><h2 id="像素比" tabindex="-1">像素比 <a class="header-anchor" href="#像素比" aria-label="Permalink to &quot;像素比&quot;">​</a></h2><ul><li>物理像素 (physical pixel) <ul><li>屏幕显示的最小单元, 可以单独设置颜色及亮度</li></ul></li><li>设备独立像素 (density-indenpendent pixel) <ul><li>逻辑像素, css 设置的像素为设备独立像素</li></ul></li><li>设备像素比 (device pixel ratio) <ul><li>设备像素比 (dpr) = 物理像素 / 设备独立像素</li><li>dpr 大于 1 的 retina 屏幕上 1px 会变粗</li></ul></li></ul><h2 id="适配方案" tabindex="-1">适配方案 <a class="header-anchor" href="#适配方案" aria-label="Permalink to &quot;适配方案&quot;">​</a></h2><h3 id="viewport-适配" tabindex="-1">viewport 适配 <a class="header-anchor" href="#viewport-适配" aria-label="Permalink to &quot;viewport 适配&quot;">​</a></h3><ul><li>通过改变页面的缩放系数来适配页面</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visualWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scaleSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visualWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metaNode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meta[name=viewport]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  metaNode.content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`initial-scale=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scaleSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},user-scalable=no,minimum-scale=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scaleSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},maximum-scale=\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scaleSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><h3 id="rem-适配" tabindex="-1">rem 适配 <a class="header-anchor" href="#rem-适配" aria-label="Permalink to &quot;rem 适配&quot;">​</a></h3><ul><li>rem 适配需要设置 <code>initial-scale = 1</code></li><li>HTML 根标签的 font-size 属性值为 1rem 的大小</li><li>布局视口的宽设置为 16 份，每份的宽为 1rem</li><li>将设计图的位图像素分为 16 份，每份为 1rem 对应的位图像素</li><li>设计图对应元素的位图像素宽除以 1rem 的位图像素宽，得到该对应元素 rem 值</li></ul><div class="language-sass vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sass</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$phoneWidth : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设计稿宽度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> px2rem(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $width </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  @return </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $phoneWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">px2rem(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XXpx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.documentElement.style.fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.documentElement.clientWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><ul><li>可以先通过 px 布局，打包时用 pxtorem 库转化为 rem 布局</li></ul><h3 id="vw-适配" tabindex="-1">vw 适配 <a class="header-anchor" href="#vw-适配" aria-label="Permalink to &quot;vw 适配&quot;">​</a></h3><ul><li>将视口宽度 <code>window.innerWidth</code> 和视口高度 <code>window.innerHeight</code> 等分为 100 份</li><li>vw : 1vw 为视口宽度的 1%</li><li>vh : 1vh 为视口高度的 1%</li><li>vmin : vw 和 vh 中的较小值</li><li>vmax : 选取 vw 和 vh 中的较大值</li><li>通过 vw, vh 等相对单位进行布局实现适配</li></ul>`,18),n=[t];function h(p,k,d,r,o,E){return a(),s("div",null,n)}const u=i(e,[["render",h]]);export{g as __pageData,u as default};
