import{_ as e,c as o,o as l,a5 as a}from"./chunks/framework.ByOCcFwP.js";const p=JSON.parse('{"title":"golang 数据类型","description":"","frontmatter":{"title":"golang 数据类型","date":"2020-01-02T11:15:41.000Z","categories":"golang","tags":["data-type"]},"headers":[],"relativePath":"backend/golang/data-type.md","filePath":"backend/golang/data-type.md"}'),i={name:"backend/golang/data-type.md"},c=a('<h2 id="内置基本类型-17种" tabindex="-1">内置基本类型（17种） <a class="header-anchor" href="#内置基本类型-17种" aria-label="Permalink to &quot;内置基本类型（17种）&quot;">​</a></h2><h3 id="数值类型" tabindex="-1">数值类型 <a class="header-anchor" href="#数值类型" aria-label="Permalink to &quot;数值类型&quot;">​</a></h3><ul><li>整数类型 <ul><li><code>int</code>（别名 <code>byte</code>）</li><li><code>int8</code></li><li><code>int16</code></li><li><code>int32</code>（别名 <code>rune</code>）</li><li><code>int64</code></li><li><code>uint</code></li><li><code>uint8</code></li><li><code>uint16</code></li><li><code>uint32</code></li><li><code>uint64</code></li><li><code>uintptr</code></li></ul></li><li>浮点数类型 <ul><li><code>float32</code></li><li><code>float64</code></li></ul></li><li>复数类型 <ul><li><code>complex64</code></li><li><code>complex128</code></li></ul></li></ul><p>整数类型的值有四种字面量形式：</p><ul><li>二进制 （binary），以 <code>0b</code> 或 <code>0B</code> 开头 ，golang 1.13 以上支持</li><li>八进制 （octal），以 <code>0</code> 或 <code>0o</code> 或 <code>0O</code> 开头，golang 1.13 以上支持</li><li>十进制（decimal），<strong>不能</strong>以 <code>0</code> 开头</li><li>十六进制（hex），以 <code>0x</code> 或 <code>0X</code> 开头</li></ul><h3 id="字符串类型" tabindex="-1">字符串类型 <a class="header-anchor" href="#字符串类型" aria-label="Permalink to &quot;字符串类型&quot;">​</a></h3><ul><li><code>string</code></li></ul><h3 id="布尔值类型" tabindex="-1">布尔值类型 <a class="header-anchor" href="#布尔值类型" aria-label="Permalink to &quot;布尔值类型&quot;">​</a></h3><ul><li><code>bool</code></li></ul>',9),d=[c];function t(n,r,s,u,h,_){return l(),o("div",null,d)}const m=e(i,[["render",t]]);export{p as __pageData,m as default};
