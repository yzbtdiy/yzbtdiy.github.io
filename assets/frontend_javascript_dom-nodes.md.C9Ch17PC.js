import{_ as e,c as d,o as t,a5 as o}from"./chunks/framework.ByOCcFwP.js";const _=JSON.parse('{"title":"javascript dom 节点","description":"","frontmatter":{"title":"javascript dom 节点","date":"2020-01-05T21:16:53.000Z","categories":"javascript","tags":["dom","nodes"]},"headers":[],"relativePath":"frontend/javascript/dom-nodes.md","filePath":"frontend/javascript/dom-nodes.md"}'),l={name:"frontend/javascript/dom-nodes.md"},i=o('<h2 id="子节点与父节点" tabindex="-1">子节点与父节点 <a class="header-anchor" href="#子节点与父节点" aria-label="Permalink to &quot;子节点与父节点&quot;">​</a></h2><h3 id="子节点常用属性" tabindex="-1">子节点常用属性 <a class="header-anchor" href="#子节点常用属性" aria-label="Permalink to &quot;子节点常用属性&quot;">​</a></h3><table><thead><tr><th>节点类型</th><th><code>nodeName</code></th><th><code>nodeType</code></th><th><code>nodeValue</code></th></tr></thead><tbody><tr><td>文本节点</td><td><code>#text</code></td><td>3</td><td>文本内容</td></tr><tr><td>元素节点</td><td>大写元素标签</td><td>1</td><td><code>null</code></td></tr><tr><td>注释节点</td><td><code>#comment</code></td><td>8</td><td>注释内容</td></tr></tbody></table><h3 id="子节点" tabindex="-1">子节点 <a class="header-anchor" href="#子节点" aria-label="Permalink to &quot;子节点&quot;">​</a></h3><ul><li><code>childNodes</code> 获取某个元素的子节点 <ul><li>高版本浏览器 ：元素子节点，文本子节点（包括空格和换行），注释子节点</li><li>低版本浏览器：元素子节点，文本子节点（不包括空格和换行），注释子节点</li></ul></li><li><code>children</code> 获取某个元素的子元素节点 <ul><li>高版本浏览器：元素子节点</li><li>低版本浏览器：元素子节点，注释子节点</li></ul></li><li><code>firstChild</code> 第一个子节点 <code>lastChild</code> 最后一个子节点，高低版本浏览器都适用</li><li><code>firstElementChild</code> 第一个子元素节点 <code>lastElementChild</code> 最后一个子元素节点，低版本浏览器不识别</li><li><code>previousSibling</code> 上一个兄弟节点 <code>nextSibling</code> 下一个兄弟节点，高低版本浏览器都适用</li><li><code>previousElementSibling</code> 上一个兄弟元素节点 <code>nextElementSibling</code> 下一个兄弟元素节点，低版本浏览器不识别</li></ul><h3 id="父节点" tabindex="-1">父节点 <a class="header-anchor" href="#父节点" aria-label="Permalink to &quot;父节点&quot;">​</a></h3><ul><li><code>parentNode</code> 获取父节点，高低版本浏览器都适用</li><li><code>parentElement</code> 获取父元素，与 <code>parentNode</code> 相同，高低版本浏览器都适用</li></ul><h2 id="节点操作" tabindex="-1">节点操作 <a class="header-anchor" href="#节点操作" aria-label="Permalink to &quot;节点操作&quot;">​</a></h2><h3 id="创建节点" tabindex="-1">创建节点 <a class="header-anchor" href="#创建节点" aria-label="Permalink to &quot;创建节点&quot;">​</a></h3><ul><li><code>document.write();</code> 页面加载完成后使用会覆盖网页中其他 DOM 对象</li><li><code>innerHtml</code> 通过 <code>+=</code> 赋值包含标签的字符串</li><li><code>document.createElement(&#39;tag&#39;)</code> 创建元素后父元素使用 <code>appendChild(追加的子节点);</code></li></ul><h3 id="获取文本" tabindex="-1">获取文本 <a class="header-anchor" href="#获取文本" aria-label="Permalink to &quot;获取文本&quot;">​</a></h3><ul><li><code>textContent</code> 属性提供对元素中的 text 的访问权限：只提供文本，去掉所有的标签 <ul><li><code>textContent</code> 可以获取隐藏元素的文本，包含换行和空白，IE8 及以下浏览器无法识别</li></ul></li><li><code>innerText</code> 属性允许将元素中的 HTML 作为字符串来获取 <ul><li><code>innerText</code> 不能获取隐藏元素的文本，获取到的文本不包含换行和空白</li></ul></li><li><code>outerHTML</code> 属性用于获取元素的完整 HTML，包含文本，标签，换行和空白 <ul><li><code>outerHTML</code> 可以获取隐藏元素完整标签及内容</li></ul></li></ul><h3 id="子节点增加-替换-删除" tabindex="-1">子节点增加，替换，删除 <a class="header-anchor" href="#子节点增加-替换-删除" aria-label="Permalink to &quot;子节点增加，替换，删除&quot;">​</a></h3><ul><li>插入子节点 <ul><li><code>insertBefore(新子节点,参照子节点);</code></li></ul></li><li>追加子节点 <ul><li><code>appendChild(追加的子节点);</code></li></ul></li><li>替换子节点 <ul><li><code>replaceChild(新子节点,原子节点);</code></li></ul></li><li>删除子节点 <ul><li><code>removeChild(删除的子节点);</code></li><li><code>子节点.remove;</code> 只有 PC 端可用，IE 和移动端不支持</li></ul></li></ul>',14),a=[i];function c(r,n,h,s,u,m){return t(),d("div",null,a)}const b=e(l,[["render",c]]);export{_ as __pageData,b as default};
