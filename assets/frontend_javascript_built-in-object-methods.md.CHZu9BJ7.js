import{_ as t,c as d,o as e,a5 as o}from"./chunks/framework.ByOCcFwP.js";const f=JSON.parse('{"title":"javascript 内置方法","description":"","frontmatter":{"title":"javascript 内置方法","date":"2019-12-30T08:58:28.000Z","categories":"javascript","tags":["methods"]},"headers":[],"relativePath":"frontend/javascript/built-in-object-methods.md","filePath":"frontend/javascript/built-in-object-methods.md"}'),r={name:"frontend/javascript/built-in-object-methods.md"},c=o('<h2 id="json-对象" tabindex="-1">JSON 对象 <a class="header-anchor" href="#json-对象" aria-label="Permalink to &quot;JSON 对象&quot;">​</a></h2><table><thead><tr><th>方法</th><th>作用</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>stringify()</code></td><td>将对象或数组对象封装为 json 字串发送至后端</td><td>对象</td><td>json 字串</td></tr><tr><td><code>parse()</code></td><td>将后端收到的 json 字串转化为对象，供前台展示</td><td>json 字串</td><td>对象</td></tr></tbody></table><h2 id="date-对象方法" tabindex="-1">Date 对象方法 <a class="header-anchor" href="#date-对象方法" aria-label="Permalink to &quot;Date 对象方法&quot;">​</a></h2><p>Date 对象是 javascript 原生时间库，从 1970 年 1 月 1日开始计时，单位是毫秒</p><table><thead><tr><th>方法</th><th>返回值</th></tr></thead><tbody><tr><td><code>getTime()</code></td><td>返回实例距离1970年1月1日00:00:00的毫秒数</td></tr><tr><td><code>getDate()</code></td><td>返回实例对象对应每个月的几号（从1开始）</td></tr><tr><td><code>getDay()</code></td><td>返回星期几，星期日为0，星期一为1，以此类推</td></tr><tr><td><code>getYear()</code></td><td>返回距离1900的年数</td></tr><tr><td><code>getFullYear()</code></td><td>返回四位的年份</td></tr><tr><td><code>getMonth()</code></td><td>返回月份（0表示1月，11表示12月）</td></tr><tr><td><code>getHours()</code></td><td>返回小时（0-23）</td></tr><tr><td><code>getMilliseconds()</code></td><td>返回毫秒（0-999）</td></tr><tr><td><code>getMinutes()</code></td><td>返回分钟（0-59）</td></tr><tr><td><code>getSeconds()</code></td><td>返回秒（0-59）</td></tr><tr><td><code>getTimezoneOffset()</code></td><td>返回当前时间与 UTC 的时区差异，以分钟表示，返回结果考虑到了夏令时因素</td></tr></tbody></table><h2 id="math-对象方法" tabindex="-1">Math 对象方法 <a class="header-anchor" href="#math-对象方法" aria-label="Permalink to &quot;Math 对象方法&quot;">​</a></h2><p>Math 对象是一个小型的数学函数和常量库</p><table><thead><tr><th>方法</th><th>返回值</th></tr></thead><tbody><tr><td><code>round()</code></td><td>返回四舍五入后的整数</td></tr><tr><td><code>floor()</code></td><td>返回向下取整后的整数</td></tr><tr><td><code>ceil()</code></td><td>返回向上取整后的整数</td></tr><tr><td><code>random()</code></td><td>返回 0 到 1 之间的随机数，包括 0 不包括 1</td></tr><tr><td><code>max()</code></td><td>返回多个值中的最大值</td></tr><tr><td><code>min()</code></td><td>返回多个值中的最小值</td></tr><tr><td><code>pow()</code></td><td>第一个参数为数字，第二个参数为几次幂，返回求幂结果</td></tr><tr><td><code>abs()</code></td><td>返回绝对值</td></tr><tr><td><code>sin()</code></td><td>返回值为正弦，参数是弧度</td></tr><tr><td><code>PI</code></td><td>圆周率，返回值为常量</td></tr></tbody></table><h2 id="字符串方法" tabindex="-1">字符串方法 <a class="header-anchor" href="#字符串方法" aria-label="Permalink to &quot;字符串方法&quot;">​</a></h2><table><thead><tr><th>方法</th><th>功能</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>charAt()</code></td><td>获取某个索引对应字符</td><td>字符索引值</td><td>该索引位置的字符</td></tr><tr><td><code>charCodeAt()</code></td><td>获取某个索引对应字符 Unicode 码</td><td>字符索引值</td><td>该索引位置字符的 Unicode 码</td></tr><tr><td><code>concat()</code></td><td>原字符串结尾拼接字符串，不改变原串</td><td>结尾拼接的字符串</td><td>拼接后的新字符串</td></tr><tr><td><code>fromCharCode()</code></td><td>将 Unicode 码转化为字符</td><td>Unicode 码</td><td>该 Unicode 码 对应字符</td></tr><tr><td><code>indexOf()</code></td><td>查找给定子串在原字符串中的位置</td><td>给定子串，开始查找的位置，从左至右</td><td>找到返回给定子串首字符的索引<br>未找到返回 -1</td></tr><tr><td><code>lastIndexOf()</code></td><td>从末尾开始查找给定子串在原字符串中的位置</td><td>给定子串，开始查找的位置，从右至左</td><td>找到返回给定子串首字符的索引<br>未找到返回 -1</td></tr><tr><td><code>replace()</code></td><td>替换子串，不改变原串</td><td>原子串，替换后的子串</td><td>替换后的新字符串</td></tr><tr><td><code>localeCompare()</code></td><td>比较大小</td><td>需要比较的新字符串</td><td>布尔值</td></tr><tr><td><code>match()</code></td><td>找到匹配项，正则表达</td><td></td><td></td></tr><tr><td><code>search()</code></td><td>找到匹配项，正则表达</td><td></td><td></td></tr><tr><td><code>slice() </code></td><td>截取字符串</td><td>起始位置索引（可为负值），结束位置索引（可为负值），包括起始不包括结束</td><td>返回截取的字符串</td></tr><tr><td><code>substr()</code></td><td>截取字符串</td><td>起始位置索引（可为负值），截取长度</td><td>返回截取的字符串</td></tr><tr><td><code>substring()</code></td><td>截取字符串</td><td>起始位置索引，结束位置索引</td><td>返回截取的字符串</td></tr><tr><td><code>split()</code></td><td>以指定分隔符将字符串转化为数组</td><td>分隔符，为 <code>&#39;&#39;</code> 会按单个字符分隔</td><td>返回生成的数组</td></tr><tr><td><code>toLocaleLowerCase()</code></td><td>字符串中所有大写字母转为当地小写字母（特定语言有效）</td><td>无</td><td>转换后的新字符串</td></tr><tr><td><code>toLowerCase()</code></td><td>字符串中所有大写字母转为小写字母</td><td>无</td><td>转换后的新字符串</td></tr><tr><td><code>toLocaleUpperCase()</code></td><td>字符串中所有小写字母转为当地大写字母（特定语言有效）</td><td>无</td><td>转换后的新字符串</td></tr><tr><td><code>toUpperCase()</code></td><td>字符串中所有小写字母转为大写字母</td><td>无</td><td>转换后的新字符串</td></tr><tr><td>ES6 新增</td><td>---</td><td>---</td><td>---</td></tr><tr><td><code>includes()</code></td><td>判断给定子串是否被原串包含</td><td>给定子串</td><td>包含返回 <code>true</code>，不包含返回 <code>false</code></td></tr><tr><td><code>startsWith()</code></td><td>判断原串是否以给定子串开头</td><td>给定子串</td><td>以该子串开头返回 <code>true</code>，否则返回 <code>false</code></td></tr><tr><td><code>endsWith()</code></td><td>判断原串是否以给定子串结尾</td><td>给定子串</td><td>以该子串结尾返回 <code>true</code>，否则返回 <code>false</code></td></tr><tr><td><code>repeat()</code></td><td>将原字符串重复若干次生成新字符串</td><td>重复次数</td><td>参数为 0 或无参数返回空串<br>参数为负数报错</td></tr></tbody></table><h2 id="数组方法" tabindex="-1">数组方法 <a class="header-anchor" href="#数组方法" aria-label="Permalink to &quot;数组方法&quot;">​</a></h2><table><thead><tr><th>方法</th><th>功能</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>pop()</code></td><td>结尾删除一个元素，修改原数组</td><td>无</td><td>返回删除的元素</td></tr><tr><td><code>push()</code></td><td>结尾追加元素，修改原数组</td><td>追加的元素（一个或多个）</td><td>返回追加后的数组</td></tr><tr><td><code>unshift()</code></td><td>头部添加元素，修改原数组</td><td>添加的元素（一个或多个）</td><td>返回添加元素后数组的长度</td></tr><tr><td><code>shift()</code></td><td>头部删除元素，修改原数组</td><td>无</td><td>返回删除的元素</td></tr><tr><td><code>splice()</code></td><td>数组添加，删除，修改元素，修改原数组</td><td>起始位置索引，删除长度，新插入元素</td><td>返回删除元素组成的数组<br>无插入元素为删除<br>删除长度为 0 且有新插入元素为添加<br>删除元素后再插入新元素为修改</td></tr><tr><td><code>concat()</code></td><td>拼接数组，不改变原数组</td><td>一个或多个元素或数组</td><td>返回拼接后的新数组<br>无参数相当于复制原数组返回</td></tr><tr><td><code>join()</code></td><td>元素拼接成字符串，不改变原数组</td><td>指定连接符（默认逗号）<br>空串表示没有连接符</td><td>返回拼接后的字符串</td></tr><tr><td><code>reverse()</code></td><td>反转数组，修改原数组</td><td>无</td><td>返回反转后的数组</td></tr><tr><td><code>slice()</code></td><td>截取数组，不改变原数组</td><td>起始索引和结束索引（包括起始不包括结束）</td><td>返回截取的新数组</td></tr><tr><td><code>sort()</code></td><td>截取数组，修改原数组</td><td>默认按照 Unicode 码排序<br>函数返回前参-后参，升序<br>函数返回后参-前参，降序</td><td>返回排序后的数组</td></tr></tbody></table><h2 id="对象方法" tabindex="-1">对象方法 <a class="header-anchor" href="#对象方法" aria-label="Permalink to &quot;对象方法&quot;">​</a></h2><table><thead><tr><th>方法</th><th>功能</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>valueOf()</code></td><td>获取对象的基本值</td><td>无</td><td>包装对象返回基本值，非包装对象返回其本身</td></tr><tr><td><code>toString()</code></td><td>将对象转化为字符串</td><td>无</td><td>包装对象将基本值转化为字符串<br>数组去除中括号后的内容转换为字符串返回<br>函数对象将函数本身转化为字符串返回<br>对象返回固定字符串 <code>[object Object]</code></td></tr></tbody></table><ul><li>包装对象和非包装对象都可以使用 <code>valueOf</code> 和 <code>toString</code> 方法</li><li><code>valueOf</code> ： <ul><li>包装对象调用各自的 <code>valueOf</code>,结果各不相同</li><li>非包装对象调用的都是 Object 对象原型中的 <code>valueOf</code>，返回的是对象本身</li></ul></li><li><code>toString</code>： <ul><li>所有对象调用各自的 <code>toString</code> 方法，结果各不相同</li></ul></li></ul>',15),a=[c];function h(i,l,s,n,b,u){return e(),d("div",null,a)}const m=t(r,[["render",h]]);export{f as __pageData,m as default};
