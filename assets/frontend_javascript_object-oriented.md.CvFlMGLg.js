import{_ as e,c as a,o as t,a5 as i}from"./chunks/framework.ByOCcFwP.js";const m=JSON.parse('{"title":"javascript 面向对象","description":"","frontmatter":{"title":"javascript 面向对象","date":"2020-01-14T19:08:00.000Z","categories":"javascript","tags":["object"]},"headers":[],"relativePath":"frontend/javascript/object-oriented.md","filePath":"frontend/javascript/object-oriented.md"}'),r={name:"frontend/javascript/object-oriented.md"},o=i('<h2 id="inheritance-继承" tabindex="-1">inheritance（继承） <a class="header-anchor" href="#inheritance-继承" aria-label="Permalink to &quot;inheritance（继承）&quot;">​</a></h2><ul><li>在某种情况下，一个类会有“子类”，子类比原本的类（称为父类）要更加具体化</li><li>子类会继承父类的属性和行为，并且也可包含它们自己的</li><li>当一个类从多个父类继承时，我们称之为“多重继承”</li></ul><h2 id="encapsulates-封装" tabindex="-1">encapsulates（封装） <a class="header-anchor" href="#encapsulates-封装" aria-label="Permalink to &quot;encapsulates（封装）&quot;">​</a></h2><ul><li>封装面向对象编程隐藏了某一方法的具体运行步骤</li><li>封装是通过限制只有特定类的对象可以访问这一特定类的成员，而它们通常利用接口实现消息的传入传出</li></ul><h2 id="polymorphism-多态" tabindex="-1">polymorphism（多态） <a class="header-anchor" href="#polymorphism-多态" aria-label="Permalink to &quot;polymorphism（多态）&quot;">​</a></h2><ul><li>由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应</li><li>多态性的概念可以用在运算符重载上</li></ul>',6),l=[o];function n(s,c,d,h,p,_){return t(),a("div",null,l)}const f=e(r,[["render",n]]);export{m as __pageData,f as default};
